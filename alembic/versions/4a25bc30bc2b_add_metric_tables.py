"""add metric tables

Revision ID: 4a25bc30bc2b
Revises: dda0fcc690c9
Create Date: 2025-10-22 23:22:55.482249
"""

from alembic import op  # type: ignore[attr-defined]
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import sqlmodel

revision = "4a25bc30bc2b"
down_revision = "dda0fcc690c9"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "metric_definitions",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("metric_key", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("display_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("short_label", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column(
            "source",
            sa.Enum(
                "combine_agility",
                "combine_anthro",
                "combine_shooting",
                "advanced_stats",
                name="metric_source_enum",
            ),
            nullable=False,
        ),
        sa.Column(
            "statistic",
            sa.Enum(
                "rank",
                "percentile",
                "z_score",
                "similarity",
                "raw",
                name="metric_statistic_enum",
            ),
            nullable=False,
        ),
        sa.Column(
            "category",
            sa.Enum(
                "anthropometrics",
                "combine_performance",
                "advanced_stats",
                name="metric_category_enum",
            ),
            nullable=False,
        ),
        sa.Column("unit", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("metric_key", name="uq_metric_definitions_key"),
    )
    op.create_index(
        op.f("ix_metric_definitions_metric_key"),
        "metric_definitions",
        ["metric_key"],
        unique=False,
    )
    op.create_table(
        "metric_snapshots",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("run_key", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "cohort",
            sa.Enum(
                "current_draft",
                "all_time_draft",
                "current_nba",
                "all_time_nba",
                name="cohort_type_enum",
            ),
            nullable=False,
        ),
        sa.Column("season_id", sa.Integer(), nullable=True),
        sa.Column(
            "position_scope",
            sa.Enum("g", "f", "c", name="metric_position_enum"),
            nullable=True,
        ),
        sa.Column(
            "source",
            sa.Enum(
                "combine_agility",
                "combine_anthro",
                "combine_shooting",
                "advanced_stats",
                name="snapshot_source_enum",
            ),
            nullable=False,
        ),
        sa.Column("population_size", sa.Integer(), nullable=False),
        sa.Column("calculated_at", sa.DateTime(), nullable=False),
        sa.Column("expires_at", sa.DateTime(), nullable=True),
        sa.Column("notes", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.ForeignKeyConstraint(
            ["season_id"],
            ["seasons.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("run_key", name="uq_metric_snapshots_run"),
    )
    op.create_index(
        op.f("ix_metric_snapshots_run_key"),
        "metric_snapshots",
        ["run_key"],
        unique=False,
    )
    op.create_index(
        op.f("ix_metric_snapshots_season_id"),
        "metric_snapshots",
        ["season_id"],
        unique=False,
    )
    op.create_table(
        "player_metric_values",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("snapshot_id", sa.Integer(), nullable=False),
        sa.Column("metric_definition_id", sa.Integer(), nullable=False),
        sa.Column("player_id", sa.Integer(), nullable=False),
        sa.Column("raw_value", sa.Float(), nullable=True),
        sa.Column("rank", sa.Integer(), nullable=True),
        sa.Column("percentile", sa.Float(), nullable=True),
        sa.Column("z_score", sa.Float(), nullable=True),
        sa.Column("value_bucket", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column(
            "extra_context", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("calculated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["metric_definition_id"],
            ["metric_definitions.id"],
        ),
        sa.ForeignKeyConstraint(
            ["player_id"],
            ["players_master.id"],
        ),
        sa.ForeignKeyConstraint(
            ["snapshot_id"],
            ["metric_snapshots.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "snapshot_id",
            "metric_definition_id",
            "player_id",
            name="uq_player_metric_values_snapshot_metric_player",
        ),
    )
    op.create_index(
        op.f("ix_player_metric_values_metric_definition_id"),
        "player_metric_values",
        ["metric_definition_id"],
        unique=False,
    )
    op.create_index(
        "ix_player_metric_values_metric_snapshot",
        "player_metric_values",
        ["metric_definition_id", "snapshot_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_player_metric_values_player_id"),
        "player_metric_values",
        ["player_id"],
        unique=False,
    )
    op.create_index(
        "ix_player_metric_values_player_snapshot",
        "player_metric_values",
        ["player_id", "snapshot_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_player_metric_values_snapshot_id"),
        "player_metric_values",
        ["snapshot_id"],
        unique=False,
    )
    op.create_table(
        "player_similarity",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("snapshot_id", sa.Integer(), nullable=False),
        sa.Column(
            "category",
            sa.Enum(
                "anthropometrics",
                "combine_performance",
                "advanced_stats",
                name="similarity_category_enum",
            ),
            nullable=False,
        ),
        sa.Column("anchor_player_id", sa.Integer(), nullable=False),
        sa.Column("comparison_player_id", sa.Integer(), nullable=False),
        sa.Column("similarity_score", sa.Float(), nullable=False),
        sa.Column("rank_within_anchor", sa.Integer(), nullable=True),
        sa.Column("shared_position", sa.Boolean(), nullable=True),
        sa.Column(
            "feature_vector_version", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column("details", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("calculated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["anchor_player_id"],
            ["players_master.id"],
        ),
        sa.ForeignKeyConstraint(
            ["comparison_player_id"],
            ["players_master.id"],
        ),
        sa.ForeignKeyConstraint(
            ["snapshot_id"],
            ["metric_snapshots.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "snapshot_id",
            "anchor_player_id",
            "comparison_player_id",
            "category",
            name="uq_player_similarity_anchor_comp_cat",
        ),
    )
    op.create_index(
        op.f("ix_player_similarity_anchor_player_id"),
        "player_similarity",
        ["anchor_player_id"],
        unique=False,
    )
    op.create_index(
        "ix_player_similarity_anchor_snapshot",
        "player_similarity",
        ["anchor_player_id", "snapshot_id"],
        unique=False,
    )
    op.create_index(
        "ix_player_similarity_category_snapshot",
        "player_similarity",
        ["category", "snapshot_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_player_similarity_comparison_player_id"),
        "player_similarity",
        ["comparison_player_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_player_similarity_snapshot_id"),
        "player_similarity",
        ["snapshot_id"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_player_similarity_snapshot_id"), table_name="player_similarity"
    )
    op.drop_index(
        op.f("ix_player_similarity_comparison_player_id"),
        table_name="player_similarity",
    )
    op.drop_index(
        "ix_player_similarity_category_snapshot", table_name="player_similarity"
    )
    op.drop_index(
        "ix_player_similarity_anchor_snapshot", table_name="player_similarity"
    )
    op.drop_index(
        op.f("ix_player_similarity_anchor_player_id"), table_name="player_similarity"
    )
    op.drop_table("player_similarity")
    op.drop_index(
        op.f("ix_player_metric_values_snapshot_id"), table_name="player_metric_values"
    )
    op.drop_index(
        "ix_player_metric_values_player_snapshot", table_name="player_metric_values"
    )
    op.drop_index(
        op.f("ix_player_metric_values_player_id"), table_name="player_metric_values"
    )
    op.drop_index(
        "ix_player_metric_values_metric_snapshot", table_name="player_metric_values"
    )
    op.drop_index(
        op.f("ix_player_metric_values_metric_definition_id"),
        table_name="player_metric_values",
    )
    op.drop_table("player_metric_values")
    op.drop_index(op.f("ix_metric_snapshots_season_id"), table_name="metric_snapshots")
    op.drop_index(op.f("ix_metric_snapshots_run_key"), table_name="metric_snapshots")
    op.drop_table("metric_snapshots")
    op.drop_index(
        op.f("ix_metric_definitions_metric_key"), table_name="metric_definitions"
    )
    op.drop_table("metric_definitions")
    # ### end Alembic commands ###
